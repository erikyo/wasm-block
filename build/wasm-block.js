!function(){"use strict";var e,t={153:function(){var e=window.wp.element,t=window.wp.blocks,n=JSON.parse('{"apiVersion":2,"name":"block/wasm-block","title":"wasm-block","description":"A wp-block boilerplate in typescript + wasm component","keywords":["wp-block","boilerplate","wasm"],"category":"media","viewScript":"file:./build/view-scripts.js","editorScript":"file:./build/wasm-block.js","editorStyle":"file:./build/wasm-block.css","style":"file:./build/style-wasm-block.css"}'),l=window.wp.blockEditor,o=window.wp.components,r=window.wp.i18n;let i=null;const s=n;(0,t.registerBlockType)(s.name,{...s,edit:function(t){let{attributes:n,setAttributes:s}=t;const{message:a,num:c}=n;return(0,e.useEffect)((()=>{i||async function(){const e={imports:{imported_func:e=>console.log(e)}};return WebAssembly.compileStreaming(fetch("/wp-content/plugins/wp-wasm-block/src/wasm/hello.wasm")).then((t=>WebAssembly.instantiate(t,e)))}().then((e=>{i=e.exports;const t=function(e,t){let n="";for(let l=e;t[l];l++)n+=String.fromCharCode(t[l]);return n}(i.hello(),new Uint8Array(i.memory.buffer));s({message:t})})).catch((e=>console.log(e)))}),[]),(0,e.createElement)("div",(0,l.useBlockProps)(),(0,e.createElement)(o.TextControl,{label:(0,r.__)("Message","boilerplate"),value:a,onChange:e=>s({message:e})}),(0,e.createElement)(o.TextControl,{label:"input-fibonacci",value:c,onChange:e=>s({num:parseInt(e)})}),(0,e.createElement)(o.Button,{text:"Apply fibonacci",variant:"secondary",onClick:()=>s({num:parseInt(i.fib(c))})}))},save:function(t){let{attributes:n}=t;const o=l.useBlockProps.save({className:"block-wasm"});return(0,e.createElement)("div",o,(0,e.createElement)("p",null,n.message),(0,e.createElement)("input",{value:n.num}),(0,e.createElement)("input",{type:"button",className:"button primary",value:(0,r.__)("Apply fibonacci","boilerplate")}))},icon:(0,e.createElement)("svg",{xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 612 612"},(0,e.createElement)("path",{fill:"#654ff0",d:"M376 0v3.3c0 38.76-31.42 70.17-70.17 70.17-38.76 0-70.17-31.42-70.17-70.17V0H0v612h612V0z"}),(0,e.createElement)("path",{fill:"#fff",d:"M142.16 329.81h40.56l27.69 147.47h.5l33.28-147.47h37.94l30.06 149.28h.59l31.56-149.28h39.78L332.43 546.5h-40.25l-29.81-147.47h-.78L229.68 546.5h-41zm287.69 0h63.94l63.5 216.69h-41.84l-13.81-48.22H428.8l-10.66 48.22h-40.75zm24.34 53.41-17.69 79.5h55.06l-20.31-79.5z"})),supports:{align:!0,className:!0,spacing:{margin:!0,padding:!0,blockGap:!0}},attributes:{message:{type:"string",default:""},num:{type:"number",default:7}}})}},n={};function l(e){var o=n[e];if(void 0!==o)return o.exports;var r=n[e]={exports:{}};return t[e](r,r.exports,l),r.exports}l.m=t,e=[],l.O=function(t,n,o,r){if(!n){var i=1/0;for(u=0;u<e.length;u++){n=e[u][0],o=e[u][1],r=e[u][2];for(var s=!0,a=0;a<n.length;a++)(!1&r||i>=r)&&Object.keys(l.O).every((function(e){return l.O[e](n[a])}))?n.splice(a--,1):(s=!1,r<i&&(i=r));if(s){e.splice(u--,1);var c=o();void 0!==c&&(t=c)}}return t}r=r||0;for(var u=e.length;u>0&&e[u-1][2]>r;u--)e[u]=e[u-1];e[u]=[n,o,r]},l.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},function(){var e={151:0,951:0};l.O.j=function(t){return 0===e[t]};var t=function(t,n){var o,r,i=n[0],s=n[1],a=n[2],c=0;if(i.some((function(t){return 0!==e[t]}))){for(o in s)l.o(s,o)&&(l.m[o]=s[o]);if(a)var u=a(l)}for(t&&t(n);c<i.length;c++)r=i[c],l.o(e,r)&&e[r]&&e[r][0](),e[r]=0;return l.O(u)},n=self.webpackChunkwasm_block=self.webpackChunkwasm_block||[];n.forEach(t.bind(null,0)),n.push=t.bind(null,n.push.bind(n))}();var o=l.O(void 0,[951],(function(){return l(153)}));o=l.O(o)}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,