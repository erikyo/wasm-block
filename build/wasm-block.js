!function(){"use strict";var e,t={267:function(){var e=window.wp.element,t=window.wp.blocks,n=JSON.parse('{"apiVersion":2,"name":"block/wasm-block","title":"wasm-block","description":"A wp-block boilerplate in typescript + wasm component","keywords":["wp-block","boilerplate","wasm"],"category":"media","viewScript":"file:./build/view-scripts.js","editorScript":"file:./build/wasm-block.js","editorStyle":"file:./build/wasm-block.css","style":"file:./build/style-wasm-block.css"}'),r=window.wp.blockEditor,o=window.wp.components,i=window.wp.i18n;const a=-8,s=-4,c=1,l=2,u=1,f=2,p=4,b=6,w=2048,y=4096,m=16384,g=0,h=4,d=8,_=12,A=12,v=16,O="Operation requires compiling with --exportTable",E=()=>{throw Error("Operation requires compiling with --exportRuntime")},k="undefined"!=typeof BigUint64Array,U=Symbol(),j=192,x=1024,C=new TextDecoder("utf-16le",{fatal:!0});function S(e,t){let n=new Uint32Array(e)[t+s>>>2]>>>1;const r=new Uint16Array(e,t,n);if(n<=j)return String.fromCharCode(...r);try{return C.decode(r)}catch{let e="",t=0;for(;n-t>x;)e+=String.fromCharCode(...r.subarray(t,t+=x));return e+String.fromCharCode(...r.subarray(t))}}function B(e){const t={};function n(e,t){return e?S(e.buffer,t):"<yet unknown>"}const r=e.env=e.env||{};return r.abort=r.abort||function(e,o,i,a){const s=t.memory||r.memory;throw Error(`abort: ${n(s,e)} at ${n(s,o)}:${i}:${a}`)},r.trace=r.trace||function(e,o,...i){const a=t.memory||r.memory;console.log(`trace: ${n(a,e)}${o?" ":""}${i.slice(0,o).join(", ")}`)},r.seed=r.seed||Date.now,e.Math=e.Math||Math,e.Date=e.Date||Date,t}function $(e,t){const n=t.exports,r=n.memory,o=n.table,i=n.__new||E,U=n.__pin||E,j=n.__unpin||E,x=n.__collect||E,C=n.__rtti_base,B=C?e=>e[C>>>2]:E;function $(e){const t=function(e){const t=new Uint32Array(r.buffer);if((e>>>=0)>=B(t))throw Error(`invalid id: ${e}`);return t[(C+4>>>2)+e]}(e);if(!(t&(u|f|p)))throw Error(`not an array: ${e}, flags=${t}`);return t}function I(e){return 31-Math.clz32(e>>>b&31)}function M(e,t,n){const o=r.buffer;if(n)switch(e){case 2:return new Float32Array(o);case 3:return new Float64Array(o)}else switch(e){case 0:return new(t?Int8Array:Uint8Array)(o);case 1:return new(t?Int16Array:Uint16Array)(o);case 2:return new(t?Int32Array:Uint32Array)(o);case 3:return new(t?BigInt64Array:BigUint64Array)(o)}throw Error(`unsupported align: ${e}`)}function P(e){const t=new Uint32Array(r.buffer),n=$(t[e+a>>>2]),o=I(n);let i=n&p?e:t[e+h>>>2];const c=n&f?t[e+A>>>2]:t[i+s>>>2]>>>o;return M(o,n&w,n&y).subarray(i>>>=o,i+c)}function T(e,t,n){return new e(z(e,t,n))}function z(e,t,n){const o=r.buffer,i=new Uint32Array(o);return new e(o,i[n+h>>>2],i[n+d>>>2]>>>t)}function D(t,n,r){e[`__get${n}`]=T.bind(null,t,r),e[`__get${n}View`]=z.bind(null,t,r)}return e.__new=i,e.__pin=U,e.__unpin=j,e.__collect=x,e.__newString=function(e){if(null==e)return 0;const t=e.length,n=i(t<<1,l),o=new Uint16Array(r.buffer);for(let r=0,i=n>>>1;r<t;++r)o[i+r]=e.charCodeAt(r);return n},e.__newArrayBuffer=function(e){if(null==e)return 0;const t=new Uint8Array(e),n=i(t.length,c);return new Uint8Array(r.buffer).set(t,n),n},e.__getString=function(e){if(!e)return null;const t=r.buffer;if(new Uint32Array(t)[e+a>>>2]!==l)throw Error(`not a string: ${e}`);return S(t,e)},e.__newArray=function(e,t=0){const n=t,o=$(e),a=I(o),s="number"!=typeof n,l=s?n.length:n,u=i(l<<a,o&p?e:c);let b;if(o&p)b=u;else{U(u);const t=i(o&f?v:_,e);j(u);const n=new Uint32Array(r.buffer);n[t+g>>>2]=u,n[t+h>>>2]=u,n[t+d>>>2]=l<<a,o&f&&(n[t+A>>>2]=l),b=t}if(s){const e=M(a,o&w,o&y),t=u>>>a;if(o&m)for(let r=0;r<l;++r)e[t+r]=n[r];else e.set(n,t)}return b},e.__getArrayView=P,e.__getArray=function(e){const t=P(e),n=t.length,r=new Array(n);for(let e=0;e<n;e++)r[e]=t[e];return r},e.__getArrayBuffer=function(e){const t=r.buffer,n=new Uint32Array(t)[e+s>>>2];return t.slice(e,e+n)},e.__getFunction=function(e){if(!o)throw Error(O);const t=new Uint32Array(r.buffer)[e>>>2];return o.get(t)},[Int8Array,Uint8Array,Uint8ClampedArray,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array].forEach((e=>{D(e,e.name,31-Math.clz32(e.BYTES_PER_ELEMENT))})),k&&[BigUint64Array,BigInt64Array].forEach((e=>{D(e,e.name.slice(3),3)})),e.memory=e.memory||r,e.table=e.table||o,W(n,e)}function I(e){return"undefined"!=typeof Response&&e instanceof Response}function M(e){return e instanceof WebAssembly.Module}async function P(e,t={}){if(I(e=await e))return T(e,t);const n=M(e)?e:await WebAssembly.compile(e),r=B(t),o=await WebAssembly.instantiate(n,t);return{module:n,instance:o,exports:$(r,o)}}async function T(e,t={}){if(!WebAssembly.instantiateStreaming)return P(I(e=await e)?e.arrayBuffer():e,t);const n=B(t),r=await WebAssembly.instantiateStreaming(e,t),o=$(n,r.instance);return{...r,exports:o}}function W(e,t={}){const n=e.__argumentsLength?t=>{e.__argumentsLength.value=t}:e.__setArgumentsLength||e.__setargc||(()=>{});for(let r of Object.keys(e)){const o=e[r];let i=r.split("."),a=t;for(;i.length>1;){let e=i.shift();Object.hasOwn(a,e)||(a[e]={}),a=a[e]}let s=i[0],c=s.indexOf("#");if(c>=0){const t=s.substring(0,c),i=a[t];if(void 0===i||!i.prototype){const e=function(...t){return e.wrap(e.prototype.constructor(0,...t))};e.prototype={valueOf(){return this[U]}},e.wrap=function(t){return Object.create(e.prototype,{[U]:{value:t,writable:!1}})},i&&Object.getOwnPropertyNames(i).forEach((t=>Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(i,t)))),a[t]=e}if(s=s.substring(c+1),a=a[t].prototype,/^(get|set):/.test(s)){if(!Object.hasOwn(a,s=s.substring(4))){let t=e[r.replace("set:","get:")],n=e[r.replace("get:","set:")];Object.defineProperty(a,s,{get(){return t(this[U])},set(e){n(this[U],e)},enumerable:!0})}}else"constructor"===s?(a[s]=function(...e){return n(e.length),o(...e)}).original=o:(a[s]=function(...e){return n(e.length),o(this[U],...e)}).original=o}else/^(get|set):/.test(s)?Object.hasOwn(a,s=s.substring(4))||Object.defineProperty(a,s,{get:e[r.replace("set:","get:")],set:e[r.replace("get:","set:")],enumerable:!0}):"function"==typeof o&&o!==n?(a[s]=(...e)=>(n(e.length),o(...e))).original=o:a[s]=o}return t}Object.hasOwn=Object.hasOwn||function(e,t){return Object.prototype.hasOwnProperty.call(e,t)};var z={instantiate:P,instantiateSync:function(e,t={}){const n=M(e)?e:new WebAssembly.Module(e),r=B(t),o=new WebAssembly.Instance(n,t);return{module:n,instance:o,exports:$(r,o)}},instantiateStreaming:T,demangle:W};let D=null;const L=n;(0,t.registerBlockType)(L.name,{...L,edit:function(t){let{attributes:n,setAttributes:a}=t;const{message:s,num:c}=n;return(0,e.useEffect)((()=>{D||async function(){return z.instantiate(fetch("http://localhost:8888/wp-content/plugins/wp-wasm-block/build/hello.wasm"),{}).then((e=>e))}().then((e=>{D=e.exports;const t=function(e,t){let n="";for(let r=e;t[r];r++)n+=String.fromCharCode(t[r]);return n}(D.hello(),new Uint8Array(D.memory.buffer));a({message:t})})).catch((e=>console.log(e)))}),[]),(0,e.createElement)("div",(0,r.useBlockProps)(),(0,e.createElement)(o.TextControl,{label:(0,i.__)("Message","boilerplate"),value:s,onChange:e=>a({message:e})}),(0,e.createElement)(o.TextControl,{label:"input-fibonacci",value:c,onChange:e=>a({num:parseInt(e)})}),(0,e.createElement)(o.Button,{text:"Apply fibonacci",variant:"secondary",onClick:()=>a({num:parseInt(D.fib(c))})}))},save:function(t){let{attributes:n}=t;const o=r.useBlockProps.save({className:"block-wasm"});return(0,e.createElement)("div",o,(0,e.createElement)("p",null,n.message),(0,e.createElement)("input",{value:n.num}),(0,e.createElement)("input",{type:"button",className:"button primary",value:(0,i.__)("Apply fibonacci","boilerplate")}))},icon:(0,e.createElement)("svg",{xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 612 612"},(0,e.createElement)("path",{fill:"#654ff0",d:"M376 0v3.3c0 38.76-31.42 70.17-70.17 70.17-38.76 0-70.17-31.42-70.17-70.17V0H0v612h612V0z"}),(0,e.createElement)("path",{fill:"#fff",d:"M142.16 329.81h40.56l27.69 147.47h.5l33.28-147.47h37.94l30.06 149.28h.59l31.56-149.28h39.78L332.43 546.5h-40.25l-29.81-147.47h-.78L229.68 546.5h-41zm287.69 0h63.94l63.5 216.69h-41.84l-13.81-48.22H428.8l-10.66 48.22h-40.75zm24.34 53.41-17.69 79.5h55.06l-20.31-79.5z"})),supports:{align:!0,className:!0,spacing:{margin:!0,padding:!0,blockGap:!0}},attributes:{message:{type:"string",default:""},num:{type:"number",default:7}}})}},n={};function r(e){var o=n[e];if(void 0!==o)return o.exports;var i=n[e]={exports:{}};return t[e](i,i.exports,r),i.exports}r.m=t,e=[],r.O=function(t,n,o,i){if(!n){var a=1/0;for(u=0;u<e.length;u++){n=e[u][0],o=e[u][1],i=e[u][2];for(var s=!0,c=0;c<n.length;c++)(!1&i||a>=i)&&Object.keys(r.O).every((function(e){return r.O[e](n[c])}))?n.splice(c--,1):(s=!1,i<a&&(a=i));if(s){e.splice(u--,1);var l=o();void 0!==l&&(t=l)}}return t}i=i||0;for(var u=e.length;u>0&&e[u-1][2]>i;u--)e[u]=e[u-1];e[u]=[n,o,i]},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},function(){var e={151:0,951:0};r.O.j=function(t){return 0===e[t]};var t=function(t,n){var o,i,a=n[0],s=n[1],c=n[2],l=0;if(a.some((function(t){return 0!==e[t]}))){for(o in s)r.o(s,o)&&(r.m[o]=s[o]);if(c)var u=c(r)}for(t&&t(n);l<a.length;l++)i=a[l],r.o(e,i)&&e[i]&&e[i][0](),e[i]=0;return r.O(u)},n=self.webpackChunkwasm_block=self.webpackChunkwasm_block||[];n.forEach(t.bind(null,0)),n.push=t.bind(null,n.push.bind(n))}();var o=r.O(void 0,[951],(function(){return r(267)}));o=r.O(o)}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,