!function(){"use strict";const t=-8,e=-4,n=1,r=2,o=1,i=2,a=4,c=6,s=2048,u=4096,l=16384,f=0,y=4,b=8,w=12,g=12,p=16,h="Operation requires compiling with --exportTable",m=()=>{throw Error("Operation requires compiling with --exportRuntime")},A="undefined"!=typeof BigUint64Array,_=Symbol(),d=192,O=1024,U=new TextDecoder("utf-16le",{fatal:!0});function E(t,n){let r=new Uint32Array(t)[n+e>>>2]>>>1;const o=new Uint16Array(t,n,r);if(r<=d)return String.fromCharCode(...o);try{return U.decode(o)}catch{let t="",e=0;for(;r-e>O;)t+=String.fromCharCode(...o.subarray(e,e+=O));return t+String.fromCharCode(...o.subarray(e))}}function S(t){const e={};function n(t,e){return t?E(t.buffer,e):"<yet unknown>"}const r=t.env=t.env||{};return r.abort=r.abort||function(t,o,i,a){const c=e.memory||r.memory;throw Error(`abort: ${n(c,t)} at ${n(c,o)}:${i}:${a}`)},r.trace=r.trace||function(t,o,...i){const a=e.memory||r.memory;console.log(`trace: ${n(a,t)}${o?" ":""}${i.slice(0,o).join(", ")}`)},r.seed=r.seed||Date.now,t.Math=t.Math||Math,t.Date=t.Date||Date,e}function j(_,d){const O=d.exports,U=O.memory,S=O.table,j=O.__new||m,$=O.__pin||m,v=O.__unpin||m,C=O.__collect||m,I=O.__rtti_base,B=I?t=>t[I>>>2]:m;function M(t){const e=function(t){const e=new Uint32Array(U.buffer);if((t>>>=0)>=B(e))throw Error(`invalid id: ${t}`);return e[(I+4>>>2)+t]}(t);if(!(e&(o|i|a)))throw Error(`not an array: ${t}, flags=${e}`);return e}function P(t){return 31-Math.clz32(t>>>c&31)}function W(t,e,n){const r=U.buffer;if(n)switch(t){case 2:return new Float32Array(r);case 3:return new Float64Array(r)}else switch(t){case 0:return new(e?Int8Array:Uint8Array)(r);case 1:return new(e?Int16Array:Uint16Array)(r);case 2:return new(e?Int32Array:Uint32Array)(r);case 3:return new(e?BigInt64Array:BigUint64Array)(r)}throw Error(`unsupported align: ${t}`)}function k(n){const r=new Uint32Array(U.buffer),o=M(r[n+t>>>2]),c=P(o);let l=o&a?n:r[n+y>>>2];const f=o&i?r[n+g>>>2]:r[l+e>>>2]>>>c;return W(c,o&s,o&u).subarray(l>>>=c,l+f)}function D(t,e,n){return new t(F(t,e,n))}function F(t,e,n){const r=U.buffer,o=new Uint32Array(r);return new t(r,o[n+y>>>2],o[n+b>>>2]>>>e)}function q(t,e,n){_[`__get${e}`]=D.bind(null,t,n),_[`__get${e}View`]=F.bind(null,t,n)}return _.__new=j,_.__pin=$,_.__unpin=v,_.__collect=C,_.__newString=function(t){if(null==t)return 0;const e=t.length,n=j(e<<1,r),o=new Uint16Array(U.buffer);for(let r=0,i=n>>>1;r<e;++r)o[i+r]=t.charCodeAt(r);return n},_.__newArrayBuffer=function(t){if(null==t)return 0;const e=new Uint8Array(t),r=j(e.length,n);return new Uint8Array(U.buffer).set(e,r),r},_.__getString=function(e){if(!e)return null;const n=U.buffer;if(new Uint32Array(n)[e+t>>>2]!==r)throw Error(`not a string: ${e}`);return E(n,e)},_.__newArray=function(t,e=0){const r=e,o=M(t),c=P(o),h="number"!=typeof r,m=h?r.length:r,A=j(m<<c,o&a?t:n);let _;if(o&a)_=A;else{$(A);const e=j(o&i?p:w,t);v(A);const n=new Uint32Array(U.buffer);n[e+f>>>2]=A,n[e+y>>>2]=A,n[e+b>>>2]=m<<c,o&i&&(n[e+g>>>2]=m),_=e}if(h){const t=W(c,o&s,o&u),e=A>>>c;if(o&l)for(let n=0;n<m;++n)t[e+n]=r[n];else t.set(r,e)}return _},_.__getArrayView=k,_.__getArray=function(t){const e=k(t),n=e.length,r=new Array(n);for(let t=0;t<n;t++)r[t]=e[t];return r},_.__getArrayBuffer=function(t){const n=U.buffer,r=new Uint32Array(n)[t+e>>>2];return n.slice(t,t+r)},_.__getFunction=function(t){if(!S)throw Error(h);const e=new Uint32Array(U.buffer)[t>>>2];return S.get(e)},[Int8Array,Uint8Array,Uint8ClampedArray,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array].forEach((t=>{q(t,t.name,31-Math.clz32(t.BYTES_PER_ELEMENT))})),A&&[BigUint64Array,BigInt64Array].forEach((t=>{q(t,t.name.slice(3),3)})),_.memory=_.memory||U,_.table=_.table||S,x(O,_)}function $(t){return"undefined"!=typeof Response&&t instanceof Response}function v(t){return t instanceof WebAssembly.Module}async function C(t,e={}){if($(t=await t))return I(t,e);const n=v(t)?t:await WebAssembly.compile(t),r=S(e),o=await WebAssembly.instantiate(n,e);return{module:n,instance:o,exports:j(r,o)}}async function I(t,e={}){if(!WebAssembly.instantiateStreaming)return C($(t=await t)?t.arrayBuffer():t,e);const n=S(e),r=await WebAssembly.instantiateStreaming(t,e),o=j(n,r.instance);return{...r,exports:o}}function x(t,e={}){const n=t.__argumentsLength?e=>{t.__argumentsLength.value=e}:t.__setArgumentsLength||t.__setargc||(()=>{});for(let r of Object.keys(t)){const o=t[r];let i=r.split("."),a=e;for(;i.length>1;){let t=i.shift();Object.hasOwn(a,t)||(a[t]={}),a=a[t]}let c=i[0],s=c.indexOf("#");if(s>=0){const e=c.substring(0,s),i=a[e];if(void 0===i||!i.prototype){const t=function(...e){return t.wrap(t.prototype.constructor(0,...e))};t.prototype={valueOf(){return this[_]}},t.wrap=function(e){return Object.create(t.prototype,{[_]:{value:e,writable:!1}})},i&&Object.getOwnPropertyNames(i).forEach((e=>Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(i,e)))),a[e]=t}if(c=c.substring(s+1),a=a[e].prototype,/^(get|set):/.test(c)){if(!Object.hasOwn(a,c=c.substring(4))){let e=t[r.replace("set:","get:")],n=t[r.replace("get:","set:")];Object.defineProperty(a,c,{get(){return e(this[_])},set(t){n(this[_],t)},enumerable:!0})}}else"constructor"===c?(a[c]=function(...t){return n(t.length),o(...t)}).original=o:(a[c]=function(...t){return n(t.length),o(this[_],...t)}).original=o}else/^(get|set):/.test(c)?Object.hasOwn(a,c=c.substring(4))||Object.defineProperty(a,c,{get:t[r.replace("set:","get:")],set:t[r.replace("get:","set:")],enumerable:!0}):"function"==typeof o&&o!==n?(a[c]=(...t)=>(n(t.length),o(...t))).original=o:a[c]=o}return e}Object.hasOwn=Object.hasOwn||function(t,e){return Object.prototype.hasOwnProperty.call(t,e)};var B={instantiate:C,instantiateSync:function(t,e={}){const n=v(t)?t:new WebAssembly.Module(t),r=S(e),o=new WebAssembly.Instance(n,e);return{module:n,instance:o,exports:j(r,o)}},instantiateStreaming:I,demangle:x};let M=null;onload=()=>{M||async function(){return B.instantiate(fetch("http://localhost:8888/wp-content/plugins/wp-wasm-block/build/hello.wasm"),{}).then((t=>t))}().then((t=>{M=t.exports;const e=function(t,e){let n="";for(let r=t;e[r];r++)n+=String.fromCharCode(e[r]);return n}(M.hello(),new Uint8Array(M.memory.buffer));document.querySelectorAll(".block-wasm").forEach((t=>{t.value=e}))})).catch((t=>console.log(t))),document.querySelectorAll(".block-wasm input.button").forEach((t=>{t.onclick=()=>{const e=t.previousSibling;e.value=parseInt(M.fib(e.value),10)}}))}}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,